React Assignment

Q-1=> How can you implement shared functionality across a component tree?
Sol=> To implement shared functionality across a component tree we can use the React Context Api.
React Context api
It helps you to create a global data that can be used by any component in the react app without making the use of props in react.Hence it is less complicated and easy and simple to use as making use of props in complex react apps is sometimes harder and complexer.

We can implemment it by-
Step-1=> Create a Context Object

import {createContext} from 'react'
export const MyContext=createContext("")

Step-2=> WRAP CPMPONENTS WITH A PROVIDER

import { useState, React } from "react";
import { MyContext } from "./MyContext";
import MyComponent from "./MyComponent";

function App() {
  const [text, setText] = useState("");

  return (
    <div>
      <MyContext.Provider value={{ text, setText }}>
        <MyComponent />
      </MyContext.Provider>
    </div>
  );
}

export default App;

Step-3=>USE THE CONTEXT ANYWHERE IN COMPONENT

import { useContext } from 'react';
import { MyContext } from './MyContext';

function Component1() {
  const { text, setText } = useContext(MyContext);

  return (
    <div>
      <h1>{text}</h1>
      <button onClick={() => setText('Hey its me')}>
        Click to see magic
      </button>
    </div>
  );
}

export default Component2;



Q-2=>Why is the useState hook appropriate for handling state in a complex component?

Sol=> The useState hook in react allows  us to create variables that are used when building component and also trigger re-render whenever there is a change in value of the variable.

useState is a very simple and straightforward way of handling states.Its syntax is quite simple and easy to use.

useState re renders the page whenever there is a change in  value of useState variable. 


